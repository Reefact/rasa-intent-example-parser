//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SkillExample.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class SkillExampleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, WORD=3;
	public const int
		RULE_example = 0, RULE_text = 1, RULE_argumentName = 2;
	public static readonly string[] ruleNames = {
		"example", "text", "argumentName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{{'", "'}}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "WORD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SkillExample.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SkillExampleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SkillExampleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SkillExampleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExampleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentNameContext[] argumentName() {
			return GetRuleContexts<ArgumentNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentNameContext argumentName(int i) {
			return GetRuleContext<ArgumentNameContext>(i);
		}
		public ExampleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_example; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISkillExampleListener typedListener = listener as ISkillExampleListener;
			if (typedListener != null) typedListener.EnterExample(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISkillExampleListener typedListener = listener as ISkillExampleListener;
			if (typedListener != null) typedListener.ExitExample(this);
		}
	}

	[RuleVersion(0)]
	public ExampleContext example() {
		ExampleContext _localctx = new ExampleContext(Context, State);
		EnterRule(_localctx, 0, RULE_example);
		int _la;
		try {
			int _alt;
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 6;
							text();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 9;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					State = 17;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__0) {
						{
						{
						State = 11;
						Match(T__0);
						State = 12;
						argumentName();
						State = 13;
						Match(T__1);
						}
						}
						State = 19;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 22;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WORD );
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 28;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 24;
							Match(T__0);
							State = 25;
							argumentName();
							State = 26;
							Match(T__1);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 30;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					State = 35;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WORD) {
						{
						{
						State = 32;
						text();
						}
						}
						State = 37;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 40;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__0 );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(SkillExampleParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(SkillExampleParser.WORD, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISkillExampleListener typedListener = listener as ISkillExampleListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISkillExampleListener typedListener = listener as ISkillExampleListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 2, RULE_text);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 44;
					Match(WORD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(SkillExampleParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(SkillExampleParser.WORD, i);
		}
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISkillExampleListener typedListener = listener as ISkillExampleListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISkillExampleListener typedListener = listener as ISkillExampleListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_argumentName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 49;
				Match(WORD);
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,3,55,2,0,7,0,2,1,7,1,2,2,7,2,1,0,4,0,8,8,0,11,0,12,0,9,1,0,1,0,1,0,
		1,0,5,0,16,8,0,10,0,12,0,19,9,0,4,0,21,8,0,11,0,12,0,22,1,0,1,0,1,0,1,
		0,4,0,29,8,0,11,0,12,0,30,1,0,5,0,34,8,0,10,0,12,0,37,9,0,4,0,39,8,0,11,
		0,12,0,40,3,0,43,8,0,1,1,4,1,46,8,1,11,1,12,1,47,1,2,4,2,51,8,2,11,2,12,
		2,52,1,2,0,0,3,0,2,4,0,0,60,0,42,1,0,0,0,2,45,1,0,0,0,4,50,1,0,0,0,6,8,
		3,2,1,0,7,6,1,0,0,0,8,9,1,0,0,0,9,7,1,0,0,0,9,10,1,0,0,0,10,17,1,0,0,0,
		11,12,5,1,0,0,12,13,3,4,2,0,13,14,5,2,0,0,14,16,1,0,0,0,15,11,1,0,0,0,
		16,19,1,0,0,0,17,15,1,0,0,0,17,18,1,0,0,0,18,21,1,0,0,0,19,17,1,0,0,0,
		20,7,1,0,0,0,21,22,1,0,0,0,22,20,1,0,0,0,22,23,1,0,0,0,23,43,1,0,0,0,24,
		25,5,1,0,0,25,26,3,4,2,0,26,27,5,2,0,0,27,29,1,0,0,0,28,24,1,0,0,0,29,
		30,1,0,0,0,30,28,1,0,0,0,30,31,1,0,0,0,31,35,1,0,0,0,32,34,3,2,1,0,33,
		32,1,0,0,0,34,37,1,0,0,0,35,33,1,0,0,0,35,36,1,0,0,0,36,39,1,0,0,0,37,
		35,1,0,0,0,38,28,1,0,0,0,39,40,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,
		43,1,0,0,0,42,20,1,0,0,0,42,38,1,0,0,0,43,1,1,0,0,0,44,46,5,3,0,0,45,44,
		1,0,0,0,46,47,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,3,1,0,0,0,49,51,5,
		3,0,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,5,1,0,
		0,0,9,9,17,22,30,35,40,42,47,52
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
